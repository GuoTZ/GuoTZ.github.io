{"pages":[{"title":"","text":"欢迎访问我的博客博客地址","link":"/README.html"},{"title":"关于GuoTZ","text":"iOS Developer, Pythoner, Gopher, 谷粉兼果粉, 强迫症患者, 非处女座. 技能 ： 汇编、C、C++、C#、Objective-C、Swift、Python、前端、.NET ：精通iOS开发，精通OC，熟悉Swift ：熟悉HTML、了解CSS、了解JavaScript、了解React ：熟悉Django、了解Flask ：熟悉 ASP.NET 之前状态 学习并实践后端. 目前状态 积累技术, 努力工作, 坚持学习, 认真生活. 实践多线程, flask, 前端，Android.","link":"/about/index.html"},{"title":"工具连接","text":"格式化JSONMac开源软件一个小工具超多的网站JSON转对象,待完成","link":"/links/index.html"},{"title":"分类","text":"","link":"/categories/index.html"},{"title":"resume","text":"","link":"/resume/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"Apache学习","text":"Mac自带apache服务器12345sudo apachectl start #开启apache sudo apachectl restart #重启apache sudo apachectl stop #关闭apache mac默认目录/Library/WebServer/Documents/ 12345678910cd /etc/apache2 #切换工作目录下：sudo cp httpd.conf httpd.conf.bak #备份文件，只需要执行一次：sudo cp httpd.conf.bak httpd.conf #如果操作出现错误！可以使用命令，恢复备份的 httpd.conf 文件：sudo vim httpd.conf #用vim编辑httpd.conf文件，httpd.conf文件时Apache的配置文件：#搜索/DocumentRoot，找到对应位置将路径改为自己创建的文件文件夹的路径#之后找到Options FollowSymLinks：修改为Options Indexes FollowSymLinks，在两个单词间添加一个Indexes单词。#接下来查找php，:/php 将代码前面的＃去掉。最后:wq保存并退出cd /etc #切换工作目录：sudo cp php.ini.default php.ini#拷贝php.ini文件：sudo apachectl -k restart #重启","link":"/2017/01/02/Apache学习/"},{"title":"Django-API插件类","text":"Response的插件类12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455\"\"\"定义一个插件类，\"\"\"from django.http import JsonResponse, HttpResponseimport json# 自定义状态码class HttpCode(object): # 正常登陆 ok = 200 # 参数错误 paramserror = 400 # 权限错误 unauth = 401 # 方法错误 methoderror = 405 # 服务器内部错误 servererror = 500# 定义统一的 json 字符串返回格式def result(code=HttpCode.ok, message=\"\", data={}, kwargs=None): json_dict = {} safe = True if not isinstance(data, dict): json_dict = {\"code\": code, \"message\": message, \"data\": list(data)} safe = False else: json_dict = {\"code\": code, \"message\": message, \"data\": data} # print('返回值'+json_dict) return JsonResponse(json_dict,safe=safe)def ok(data={},message=\"\"): return result(code=0, message=message, data=data)# 参数错误def params_error(message=\"\", data={}): return result(code=1, message=message, data=data)# 权限错误def unauth(message=\"\", data={}): return result(code=4, message=message, data=data)# 方法错误def method_error(message=\"\", data={}): return result(code=2, message=message, data=data)# 服务器内部错误def server_error(message=\"\", data={}): return result(code=3, message=message, data=data) request的插件类1234567891011121314151617181920212223242526272829def requestIsGet(view): def decorator( request, *args, **kwargs): print('自定义装饰器被调用了') print('请求路径%s' % request.path) if request.method != 'GET': return reqMethodError(0) return view(request, *args, **kwargs) return decoratordef requestIsPost(view): def decorator( request, *args, **kwargs): print('自定义装饰器被调用了') print('请求路径%s' % request.path) if request.method != 'POST': return reqMethodError(0) return view(request, *args, **kwargs) return decoratordef reqMethodError(type): msg = '' if type == 0 : msg = '请求方式错误，应该为Get请求' elif type == 1 : msg = '请求方式错误，应该为Get请求' return resultApi.method_error(msg)def page_not_found(request): print ('404') return render(request, 'blogs/404.html') 插件类的使用1234@requestIsGetdef index(request): data = {} return resultApi.ok(data)","link":"/2019/03/26/Django-API插件类/"},{"title":"RESTAPI 安全设计","text":"RESTAPI的安全处理—以Django为例1、使用Token机制AES的加密方式加密token包含内容 包含加密密码字符串 1appkey：双方约定值；用于AES加密的密码 包含设备相关信息，设备唯一码 可做踢下线功能 包含用户相关信息 可验证用户信息 包含时间相关信息 可判断登录时效 可包含其他相关信息 例如：经纬度等等 由客户端登录之后向服务器获取token值,服务端获取到deviceId跟userId、当前时间戳根据appkey由AES加密生成token信息，返回给用户端，一般情况下用户端在发起网络请求是在header中携带token信息 2、加密Post请求参数机制RSA的加密方式加密 生成一对公、私钥，公钥分派给客户端 在使用时：客户端先把给服务端的参数序列化成json串，再使用公钥加密，然后base64编码后传给服务器 服务器在收到请求时，使用私钥解密可获得参数 一般使用在登录、获取token、下单等重要接口中 iOS端使用iOSRsa,Ase,Base64加密工具123456789101112UserModel *model = [UserModel new];model.Id = 100;model.name = @\"hjaskdh\";model.userName = @\"hjkasfyhuisa\";NSString *pubkey = @\"-----BEGIN PUBLIC KEY-----\\MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCwRu9ANZ3OwzbgoszQxuF5MSUB\\sBgYGX0KQ8xO+Qdd2cmrkw5QljcXdOAhKNYZbBEKxd8RmWVKF81ZEQgqIRKwcNEO\\vv4mJTSfG0PJHXZj+racvWqSVEVl0IgglU+RpJ/W1pBNFzBwN6jW74eyof9epxUo\\NmwSIThRcy5XIQ/P5QIDAQAB\\-----END PUBLIC KEY-----\";NSString *jsonStr = [model modelToJSONString];//转换层字符串NSString *json = [[RSA encryptString:jsonStr publicKey:pubkey] base64EncodedString];//加密 PHP端1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;?php/**私钥*/define('RSA_PRIVATE','-----BEGIN PRIVATE KEY-----MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALBG70A1nc7DNuCizNDG4XkxJQGwGBgZfQpDzE75B13ZyauTDlCWNxd04CEo1hlsEQrF3xGZZUoXzVkRCCohErBw0Q6+/iYlNJ8bQ8kddmP6tpy9apJURWXQiCCVT5Gkn9bWkE0XMHA3qNbvh7Kh/16nFSg2bBIhOFFzLlchD8/lAgMBAAECgYAhD+zn2iaTFUJBt8c6kVLQ7ErImkKqon01Y6n6VfLvw11z9M0GiGYk3CL9lS8y7XX001AXePHqh7RYND2XyUQ7y6YEAY/1Q8zOtp1ustSABt6QfmuVfBJ02tKEAxTkA/G94yKpO49Mbs5+PCXI6Z+K9COwqVYV9kH6qrisnwawsQJBAOj+VNfHkIA3KAapM+J8r5Zf1ywaREuBhU1d1t98psro6Oo9+dkX1r393NGd0Od2x5ZdJih3epDrdcoAk9mT7IcCQQDBrullgZWmR6N+pk0/ku24QfVdaYxwEOp7g53Q9oIIqaVDCCzKygq6VfulCS7Mmf00kZZRdaXim6V/ShnB4AczAkEAonoppEgQprjP+sUn33tf3xd6r9Cpa5Yo5WjZHQSKM9n0AtWxVAjhwaA0yyCou6EDUgInR/T5zfHFNFbuw736JQJAB49KMNoT+z+ElCbtkPOtL6nzZ8f84UrnvBZxDHzyql/kwW8KQIgOTyOYBOMM3pOMHIcqNNfAt82XchZ0VurlnQJBALmW42kRMNA0dR5zD5OBt5LDFux5Qiq9jus6dfcqF8LE4oH43WO/9mt987h7SyKngBiF+7KgH8qJYECdDifODks=-----END PRIVATE KEY-----');/**公钥*/define('RSA_PUBLIC', '-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCwRu9ANZ3OwzbgoszQxuF5MSUBsBgYGX0KQ8xO+Qdd2cmrkw5QljcXdOAhKNYZbBEKxd8RmWVKF81ZEQgqIRKwcNEOvv4mJTSfG0PJHXZj+racvWqSVEVl0IgglU+RpJ/W1pBNFzBwN6jW74eyof9epxUoNmwSIThRcy5XIQ/P5QIDAQAB-----END PUBLIC KEY-----');class Test1 extends Base{ /** * 验证登录 * */ protected $uid; public function __construct() { if (is_numeric(parent::__construct())) { $this-&gt;uid = parent::__construct(); } else { echo parent::__construct(); exit; } } //意见反馈提交 public function index() { if (parent::getMethod() != 'true') { echo parent::getMethod(); exit; } $uid = $this-&gt;uid; $orderId = input('get.orderId'); $private_key = openssl_pkey_get_private(RSA_PRIVATE); if (!$private_key) { die('私钥不可用'); } $return_de = openssl_private_decrypt(base64_decode(base64_decode($orderId)), $decrypted, $private_key); if (!$return_de) { return('解密失败,请检查RSA秘钥---------'.$orderId); } $arr = json_decode($decrypted,true); return jsonReturnApi('操作失败', -1, $arr); }}","link":"/2019/05/05/Django-RESTfulAPI-安全设计/"},{"title":"Django入门","text":"Django mysql配置1234567891011底层使用 mysqlclient底层使用 mysqlclient底层使用 mysqlclient底层使用 mysqlclient底层使用 mysqlclient底层使用 mysqlclient底层使用 mysqlclient底层使用 mysqlclient底层使用 mysqlclient底层使用 mysqlclientDATABASES = { 'default': { 'ENGINE': 'django.db.backends.mysql', 'NAME': 'xxx', 'USER': 'xxx', 'PASSWORD':'xxx', 'HOST': 'localhost', 'PORT': '3306', }} VSCode 运行Django123456789101112131415DEBUG 选择python:Django{ \"name\": \"Python: Django\", \"type\": \"python\", \"request\": \"launch\", \"program\": \"${workspaceFolder}/manage.py\", \"console\": \"integratedTerminal\", \"args\": [ \"runserver\", \"8080\",#添加端口号 \"--noreload\", \"--nothreading\" ], \"django\": true}, Django自动生成对象模型12345678910自动生成models模型文件 Python3 manage.py inspectdb 这样就可以在控制台的命令行中看到数据库的模型文件了把模型文件导入到app中 创建一个app python3 manage.py inspectdb &gt; app/models.py 生成单张表python3 manage.py inspectdb api_blog_subject&gt; cms/models/blogSubject.py Django框架使用-生成数据库表12345python3 manage.py makemigrations #会检查数据库定义的代码是否正确.python3 manage.py migratepython3 manage.py flush #清空数据库（此命令会询问是 yes 还是 no, 选择 yes 会把数据全部清空掉，只留下空表。）#清空数据库（此命令会询问是 yes 还是 no, 选择 yes 会把数据全部清空掉，只留下空表。）#清空数据库（此命令会询问是 yes 还是 no, 选择 yes 会把数据全部清空掉，只留下空表。）#清空数据库（此命令会询问是 yes 还是 no, 选择 yes 会把数据全部清空掉，只留下空表。）python3 manage.py createsuperuser #创建超级管理员 Django setting中 time zone和language code设置中文的问题123456将language code设置为'zh-cn'后每次启动server都提示error，说找不到zh-cn的language code。最后发现改成'zh-hans'即可Django1.9以后language code 'zh-cn'就被丢弃了，使用'zh-hans'代替。TIME_ZONE = 'Asia/Shanghai'LANGUAGE_CODE = 'zh-hans'","link":"/2018/01/13/Django入门/"},{"title":"Git入门","text":"git - 简易指南Git是一个分散式版本控制软件。最初的目的是为了更好的管理Linux内核开发而设计。与CVS、 Subversion等集中式版本控制软件不同，Git不需要服务器端软件就可以发挥版本控制的作用。 使得代码的维护和发布变得非常方便。 Git库目录结构123456hooks : 存储钩子文件夹logs : 存储日志文件夹refs : 存储指向各个分支指针的(SHA-1)的文件夹objects : 存储git对象config : 存储配置文件HEAD : 指向当前分支的指针文件路径 安装下载 git OSX 版下载 git Windows 版下载 git Linux 版创建新仓库创建新文件夹，打开，然后执行git init以创建新的 git 仓库。 检出仓库执行如下命令以创建一个本地仓库的克隆版本：1git clone /path/to/repository 如果是远端服务器上的仓库，你的命令会是这个样子：git clone username@host:/path/to/repository 工作流你的本地仓库由 git 维护的三棵“树”组成。第一个是你的 工作目录，它持有实际文件；第二个是 缓存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，指向你最近一次提交后的结果。 添加与提交你可以计划改动（把它们添加到缓存区），使用如下命令：12git add &lt;filename&gt;git add * 这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：1git commit -m &quot;代码提交信息&quot; 现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。 推送改动你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：git push origin master 可以把 master 换成你想要推送的任何分支。如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：git remote add origin &lt;server&gt;如此你就能够将你的改动推送到所添加的服务器上去了。 分支分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。 创建一个叫做“feature_x”的分支，并切换过去：git checkout -b feature_x 切换回主分支：git checkout master 再把新建的分支删掉：git branch -d feature_x 除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：git push origin &lt;branch&gt; 更新与合并要更新你的本地仓库至最新改动，执行：git pull以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。 要合并其他分支到你的当前分支（例如 master），执行：git merge &lt;branch&gt;两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 冲突（conflicts）。 这时候就需要你修改这些文件来人肉合并这些 冲突（conflicts） 了。改完之后， 你需要执行如下命令以将它们标记为合并成功：git add &lt;filename&gt; 在合并改动之前，也可以使用如下命令查看：git diff &lt;source_branch&gt; &lt;target_branch&gt; 标签在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 1.0.0 的标签：git tag 1.0.0 1b2e1d63ff1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：git log你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。 替换本地改动假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：git checkout -- &lt;filename&gt;此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。 假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：12git fetch origingit reset --hard origin/master 有用的贴士内建的图形化 git：gitk彩色的 git 输出：git config color.ui true显示历史记录时，只显示一行注释信息：git config format.pretty oneline交互地添加文件至缓存区：git add -i 为了使Git更好用，对Git做一些配置，.gitconfig文件中可以设置自定义命令等，.gitignore 文件是默认被忽略版本管理的文件。1234567891011121314151617181920212223242526272829303132333435[push] default = current[color] ui = auto[alias] aa = add --all ap = add --patch ca = commit --amend ci = commit -v co = checkout br = branch create-branch = !sh -c 'git push origin HEAD:refs/heads/$1 &amp;&amp; git fetch origin &amp;&amp; git branch --track $1 origin/$1 &amp;&amp; cd . &amp;&amp; git checkout $1' - delete-branch = !sh -c 'git push origin :refs/heads/$1 &amp;&amp; git branch -D $1' - merge-branch = !git checkout master &amp;&amp; git merge @{-1} pr = !hub pull-request st = status up = !git fetch origin &amp;&amp; git rebase origin/master[core] excludesfile = ~/.gitignore autocrlf = input[merge] ff = only[include] path = .gitconfig.local[commit] template = ~/.gitmessage[fetch] prune = true[user] name = zgs225 email = zgs225@gmail.com[credential] helper = osxkeychain[github] user = zgs225 原文","link":"/2017/01/27/Git入门/"},{"title":"Mac FTP相关操作","text":"安装ftp命令123brew install telnet brew install inetutils brew link --overwrite inetutils ftp的使用登录 方式一 ftp server-ip 方式二 12345678910111213ftpftp&gt; open server-ip#ftp登录还有其他方式，这里只介绍两种。#以上命令之后，按提示输入用户名和密码。#当出现以下日志，表示连接成功#Connected to server-ip#220 (vsFTPd 2.2.2)#Name (10.0.5.11:lipengxiang): username#331 Please specify the password.#Password:#230 Login successful.#此时已经进入ftp命令行环境，此时如果进行本地目录或文件操作命令将发生一些变化，如下： 服务器操作 本地目录操作 cd 目录名（进入服务器目录） lcd 目录名（进入本机目录） cd \\（退到服务器根目录） lcd \\（退到本机根目录） cd ..（退回到上一级目录） lcd ..（退回到上一级目录） pwd !pwd ls !ls 上传文件server-filename 必须显式指明，否则报错：文件名无效 ftp&gt; put /local/path/filename /remote/path/server-filename 注意：向ftp服务器上传文件有两种模式 字符模式（ASCII）和二进制模式（Binary）。默认是ASCII模式。一般上传非文本文件要用二进制模式。登录ftp后，上传文件前，在ftp&gt;状态下输入bin即可(切换为二进制模式)。在ftp&gt;状态下输入asc(切换为ASCII模式) 批量上传使用通匹符批量上传文件至服务器，需要注意的一点，mput 不支持绝对路径，应该先进入要上传的本地文件夹及远程文件夹才可以操作。12345ftp&gt; cd /remote/pathftp&gt; lcd /local/pathftp&gt; mput file*local: file.jar remote: file.jar #注意：ftp不支持文件夹上传 文件下载下载服务器中的文件至本地目录中，可选指定下载至本地目录后的文件名称，依然要求提前进入待下载文件的目录中。123ftp&gt; get remote-filename local-filenamelocal-filename可省略，默认本地当前路径。#注意：关于下载文件夹， FTP 命令不支持文件夹下载操作。 删除文件ftp&gt; delete /remote/path/filename在服务器中删除文件，可以指定绝对路径，相对其他命令显得比较灵活。","link":"/2017/01/06/Mac-FTP相关操作/"},{"title":"Mac应用shell启动","text":"给App起别名1234vim ~/.zshrc#给App起别名alias vscode=\"/Applications/Visual\\ Studio\\ Code.app/Contents/Resources/app/bin/code\"source ~/.zshrc 使用别名12vscode #启动VSCodevscode test.py #用VSCode打开文件","link":"/2017/02/06/Mac应用shell启动/"},{"title":"Mac开发配置","text":"Homebrew安装123# OSX系统基本上都自带Ruby1.9# 所以无需先安装Ruby，但是之后我们需要管理Rubyruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" brew常用命令12345678910brew list # 查看已经安装的包brew update # 更新Homebrew自身brew doctor # 诊断关于Homebrew的问题(Homebrew 有问题时请用它)brew cleanup # 清理老版本软件包或者无用的文件brew show ${formula} # 查看包信息brew search ${formula} # 按名称搜索brew upgrade ${formula} # 升级软件包brew install ${formula} # 按名称安装brew uninstall ${formula} # 按名称卸载brew pin/unpin ${formula} # 锁定或者解锁软件包版本，防止误升级 ZSH查看系统支持的shell1cat /etc/shells 切换默认shell12345678910111213# 切换zsh为默认shellchsh -s $(which zsh)#如果你想使用最新的zsh，你可以使用Homebrew，此方法也会保留原生的zsh，防止你在某个 时刻需要它。#查看最新zsh信息brew info zsh# 安装zshbrew install --disable-etcdir zsh# 添加shell路径至/etc/shells文件中# 将 /usr/local/bin/zsh 添加到下面文件中sudo vim /etc/shells# 更换默认shellchsh -s /usr/local/bin/zsh 待续","link":"/2017/01/26/Mac开发配置/"},{"title":"Nginx学习一","text":"nginx的安装1234conf 配置文件html 网页文件logs log日志sbin 二进制文件 nginx其他命令1234ps aux|grep nginx 查看nginxcat nginx.pid 查看进程号killall -9 nginx 杀死进程kill -USR2 进程号 控制命令123456kill -USR2 cat nginx.pid #不是杀进程相当于重启nginx -t #检测配置是否成功nginx -s reload #重新加载配置文件nginx -s stop #立即停止nginx -s quit #优雅的停止 及当前访问的进程不加载🆕配置nginx -s reopen #重新加载日志配置 配置文件nginx.conf12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#指定用什么用户去跑work process，默认用linux下的nobody用户 #user nobody; #工作进程数,可以设置为auto,nginx会探测cpu核心数，启动相同数量的work processworker_processes 1; #错误日志存放位置.既然叫错误日志，通常应设置级别为warn|error#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#主进程pid文件存放的地点#pid logs/nginx.pid;#events模块只能在main上下文中，并且只能配置一个，#其中可以包含7种简单指令events { worker_connections 1024; #每个worker process可以支持的最大连接数，生成环境根据需要可以设置更大一些（9000） #值得注意的是，此数字是包括了反向代理等等所需要的连接数在内，并不仅仅是指web端发起的连接数 #multi_accept on #是否work进程一次只接收一个连接。并发较大时应打开 #use epoll #选择底层处理连接的模型，Linux下默认epoll，无需自己设置 #accept_mutex #accept_mutex_delay #上面2参数是表示是否让worker进程使用one by one的工作模式，默认是关闭的。 #开启的时候，在低并发的时候非工作状态下的worker process将休眠，避免浪费资源。}#nginx配置的“核心”http { #include指令用于加载单独的配置文件模块，避免过于臃肿 #而这里的mime.types表示此文件应该在nginx.conf的同级目录下。 #其中的types模块用于表示nginx响应的文件后缀名和content-type直接的映射 #比如你想要让浏览器识别你返回的mytxt.data文件为文本内容在浏览器中显示为文本,添加 text/plain data; include mime.types; #上面的匹配失败后，默认给的响应内容类型 default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' # '$status $body_bytes_sent \"$http_referer\" ' # '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; #io时不阻塞处理connection，在传输大文件时使用，细节待研究 sendfile on; #tcp_nopush on;#貌似意思是只有在sendfile启用时使用，让nginx发包的时候满包发送（不明白）通常不使用 #连接idle的最大时间，现代浏览器往往在一个页面同时打开多个connection传输js,css,html等。 #设置最大idle时间避免过长等待浪费connection #keepalive_timeout 0; keepalive_timeout 65; #开启response响应压缩，可以节省带宽，默认关闭。细节待研究 #gzip on; #server 上下文代表一个虚拟主机，可以有多个，内嵌在比如http,mail模块中 server { listen 80; server_name myapp.info; #如果是在本地试验，要修改/etc/hosts的域名映射到本机 location / { #location的匹配规则too tricky，单开一篇blog 注意匹配的文件夹的访问权限 root /usr/local/nginx; } } } 12worker_processes 一般为CPU数×核数关键还需看网卡的吞吐量 server配置虚拟主机123456Apache下配置&lt;virturlhost&gt; servername 域名 documentroot 路径&lt;/virturlhost&gt;说明该域名指向路径就行了 12345678nginx配置server { listen 80; server_name 域名; location / { root 文件路径; index index.php index.html; }","link":"/2017/01/23/Nginx学习一/"},{"title":"Python 虚拟机","text":"virtualenvwrapper1virtualenvwrapper 是一个基于 virtualenv 之上的工具，它将所有的虚拟环境集中起来管理。 安装sudo pip install virtualenvwrapper 配置1234vim ~/.bashrcexport WORKON_HOME=~/workspaces #存放虚拟环境的位置source /usr/bin/virtualenvwrapper.sh 使用123456mkvirtualenv env1 #创建workon env1 #切换虚拟机cpvirtualenv env1 env3 #赋值虚拟机rmvirtualenv env2 #删除虚拟机pip list #查看虚拟机中的packagesdeactivate #退出 其他命令1234lsvirtualenv #显示所有虚拟环境。cdvirtualenv #跳转至当前虚拟环境目录，方便查看虚拟环境的 site-packages 目录。cdsitepackages #直接跳转至当前虚拟环境的 site-packages 目录。lssitepackages #显示当前虚拟环境的 site-packages 目录内容。","link":"/2017/04/30/Python-虚拟机/"},{"title":"Swift面向协议 POP","text":"基于 Swift 的面向协议编程12面向对象的设计和面向协议的设计都使用了多态让我们使用同样的接口来跟不同的类型进行交互。在面向对象的设计中，我们使用了基类提供的接口来跟所有的子类进行交互。在面向协议的设计中，我们使用了协议和协议扩展提供的接口来跟遵守该协议的类型进行交互。两种设计方式写出的代码都很好而且易懂。但个人感觉协议/协议扩展代码更好，因为协议/协议扩展的方法整体更干净和易懂些。' 12在面向协议设计中我们更多的使用了值类型（结构体struct）而非引用类型（类class）。Apple已经说了我们应该在合适的地方尽可能地偏好使用值类型而非引用类型。 未完待续","link":"/2019/05/04/Swift面向协议-POP/"},{"title":"VSCode插件化","text":"开发vscode代码提示插件打开seting.json123\"[markdown]\": { \"editor.quickSuggestions\": true } userCode添加12345678910111213141516171819{ \"categories\": { \"prefix\": \"cate\", \"body\": [ \"toc: true\", \"categories: [$0]\" ], \"description\": \"categories\" }, \"python-code\": { \"prefix\": \"python-code\", \"body\": [ \"```python\", \"$0\", \"```\", ], \"description\": \"这是python的多行代码块\" }} 效果如下 VSCode官方文档","link":"/2019/05/08/VSCode插件化/"},{"title":"Swift  Result<T, E: Error> 枚举类型","text":"Swift 枚举类型Swift 中枚举的能力相比 OC 有着很大的进步，每个枚举值除了可以是常规的基础类型，还可以是一个关联的类型。有了这样的特性后用枚举来优化返回结果的数据结构显得水到渠成： 12345678enum Result&lt;Success, Failure&gt; where Failure : Error { /// A success, storing a `Success` value. case success(Success) /// A failure, storing a `Failure` value. case failure(Failure)} 基本用法定义异步返回结果是 Int 类型的函数：123456789101112func fetchData(_ completionHandler: @escaping (Result&lt;Int, Error&gt;) -&gt; Void) { DispatchQueue.global().async { let isSuccess = true if isSuccess { let resultValue = 6 return completionHandler(.success(resultValue)) } else { let error = NSError(domain: \"custom error\", code: -1, userInfo: nil) return completionHandler(.failure(error)) } }} 返回值的类型通过泛型进行约束， Result 第一个泛型类型表示返回值的类型，第二个类型表示错误的类型。对 Result 赋值和常规的枚举一样：1let valueResult: Result&lt;Int, CustomError&gt; = Result.success(4) // 因为 swift 中会进行类型推断，编译器在确认返回的是 Result 类型后，可以省略枚举类型的声明let errorResult = .failure(CustomError.inputNotValid)取出 Result 值和获取普通的关联类型枚举是一样的：12345678fetchData { (result) in switch result { case .success(let value): print(value) case .failure(let error) print(error.localizedDescription) }} 如果你只想要获取其中一项的值，也可以直接用 if case 拆包：12345fetchDate { (result) in if case .success(let value) = result { print(value) }} 可以判等Enum 是一个值类型，是一个值就应该可以判断是否相等。如果 Result 的成功和失败的类型都是 Equatable，那么 Result 就可以判等，源码如下：1extension Result : Equatable where Success : Equatable, Failure : Equatable { } 类似的，如果是成功和失败的类型都是 Hashable，那么 Result 也是 Hashable：1extension Result : Hashable where Success : Hashable, Failure : Hashable { } 如果实现了 Hashable ，可以用来当做字典的 key。 辅助的 APImap、mapError与 Dictionary 类似，Swift 为 Result 提供了几个 map value 和 error 的方法。1234567891011let intResult: Result&lt;Int, Error&gt; = Result.success(4)let stringResult = x.map { (value) -&gt; Result&lt;String, Error&gt; in return .success(\"map\")}let originError = NSError(domain: \"origin error\", code: -1, userInfo: nil)let errorResult: Result&lt;Int, Error&gt; = .failure(originError)let newErrorResult = errorResult.mapError { (error) -&gt; Error in let newError = NSError(domain: \"new error\", code: -2, userInfo: nil) return newError} flatMap、flatMapErrormap 返回的是具体的结果和错误， flatMap 闭包中返回的是 Result 类型。如果 Result 中包含的是数据，效果和 map 一致，替换数据；如果 Result 中包含的是错误，那么不替换结果。1234567891011let intResult: Result&lt;Int, Error&gt; = Result.success(4)// 替换成功let flatMapResult = intResult.flatMap { (value) -&gt; Result&lt;String, Error&gt; in return .success(\"flatMap\")}// 没有执行替换操作，flatMapIntResult 值还是 intResultlet flatMapIntResult = intResult.flatMap { (value) -&gt; Result&lt;String, Error&gt; in return .failure(NSError(domain: \"origin error\", code: -1, userInfo: nil))} get很多时候只关心 Result 的值， Swift 提供了 get() 函数来便捷的直接获取值，需要注意的是这个函数被标记为 throws，使用时语句前需要加上 try：123let intResult: Result&lt;Int, Error&gt; = Result.success(4)let value = try? intResult.get() 可抛出异常的闭包初始化器很多时候获取返回值的闭包中可能会发生异常代表获取失败的错误，基于这个场景 Swift 提供了一个可抛出异常的闭包初始化器：12345678910111213enum CustomError: Error, Equatable { case inputNotValid}let fetchInt = { () -&gt; Int in if true { return 4 } else { throw CustomError.inputNotValid }}let result: Result&lt;Int, Error&gt; = Result { try fetchInt() } 需要提醒是通过这种方式声明的 Result 的 error 类型只能是 Error，不能指定特定的 Error。","link":"/2019/05/03/Swift-Result-T-E-Error-枚举类型/"},{"title":"centos下搭建svn","text":"centos7 Linuxsvn安装配置 安装svn yum -y install subversion 创建svn根文件夹mkdir /var/svns 配置文件夹 123vim /etc/sysconfig/svnserve#文件内容OPTIONS=\"-r /var/svns\" svn创建版本库 创建svn版本库svnadmin create /var/svns/xxxx 1234#版本库的conf文件夹authz：#负责账号权限的管理，控制账号是否读写权限passwd：#负责账号和密码的用户名单管理svnserve.conf：#svn服务器配置文件 vim svnserve.conf 12345anon-access = none #表示禁止匿名用户访问。auth-access = write #表示授权用户拥有读写权限。password-db = passswd #指定用户名口令文件，即 passwd 文件。authz-db = authz #指定权限配置文件，即 authz 文件。realm = /var/svnrepos #指定认证域，即 /var/svnrepos 目录。 vim passwd 12[users] #下面添加admin = rw #设置读写权限 vim authz 12[/]admin = password #账号密码 svn命令控制123killall svnserve #杀掉svn进程svnserve -d -r /var/svns #启动svnps -ef | grep svn #看服务启动是否成功 mac地址测试 svn co svn://ip地址:3690/xxxx centos7 防火墙开放svn通过12firewall-cmd --permanent --add-port=3690/tcpsystemctl restart firewalld","link":"/2017/01/27/centos下搭建svn/"},{"title":"iOS 开发相关开源库","text":"1、腾讯开源，提高项目 UI 开发效率的解决方案：QMUI_iOS 2、iOS 组件化、解藕最佳方案，最强大的动态路由库：FFRouter 3、iOS逆向开发工具：MonkeyDev 4、自动创建带有调试信息的appIcon的脚本：LLIconVersioning 5、iOS 性能分析和测试框架：DetoxInstruments 6、WebView OC与JS通信框架：WebViewJavascriptBridge 7、一个简单的UITableView/UICollectionView的superclass category，用于无数据时自动显示空视图：DZNEmptyDataSet 8、iOS代码自动翻新(混淆)工具：WHC_ConfuseSoftware 9、一个可以观看国内主流视频平台所有vip视频的Mac客户端：ivideo 10、开屏广告、启动广告解决方案-支持静态/动态图片广告,mp4视频广告,全屏/半屏广告：XHLaunchAd 11、一款功能强大的 macOS 版微信小助手，支持防撤回、多开、自动回复：WeChatPlugin-MacOS 12、iOS APP内调试工具，支持抓包、Crash收集、沙盒文件浏览等：LLDebugTool 13、一款iOS苹果远程推送测试程序,Mac OS 下的 APNS 工具：SmartPush 14、Mac里provisionprofile和mobileprovision文件管理器工具：ProfilesManager 15、iOS跑马灯大全：MarqueeLabel 16、支持iOS/tvOS/OSX的漂亮图表、统计图：Charts 17、一行代码设置状态栏、导航栏按钮、标题、颜色、透明度，移动等：WRNavigationBar 18、用于原生渲染After Effects矢量动画的iOS库：lottie-ios 19、Core Data和SQLite的替代品：realm-cocoa 20、Mac OS开源密码存储工具：MacPass","link":"/2016/12/13/iOS-开发相关开源库/"},{"title":"iOS脚本自动打包发布及自动检测更新","text":"使用到的第三方平台 蒲公英 集成蒲公英SDK 1234pod 'PgyUpdate'//启动更新检查SDK[[PgyUpdateManager sharedPgyManager] startManagerWithAppId:@\"appkey\"];//在蒲公英平台获取[[PgyUpdateManager sharedPgyManager] checkUpdate]; 由于蒲公英平台更新APP的条件是根据Version和build的值判断更新，所以每次打包时build加1 iOS手动打包添加脚本打包build自增 选择build phases， 在其中添加run Script 脚本，其内容如下： 123456if [ \"$CONFIGURATION\" != \"Debug\" ]thenbuildNumber=$(/usr/libexec/PlistBuddy -c \"Print CFBundleVersion\" \"$INFOPLIST_FILE\")buildNumber=$(($buildNumber + 1))/usr/libexec/PlistBuddy -c \"Set :CFBundleVersion $buildNumber\" \"$INFOPLIST_FILE\"fi 自动打包脚本 在脚本的编译开始时添加如下代码 12345# 工程的Bundle +1buildNumber=$(/usr/libexec/PlistBuddy -c \"print CFBundleVersion\" ${project_path}/${project_name}/Info.plist)echo $buildNumberbuildNumber=$(($buildNumber + 1))/usr/libexec/PlistBuddy -c /usr/libexec/PlistBuddy -c \"print CFBundleVersion\" ${project_path}/@{project_name}/Info.plist 上传到测试平台 123456#上传到Fir# 将XXX替换成自己的Fir平台的token#fir login -T XXX#fir publish $exportIpaPath/$scheme_name.ipaipaPath=${exportIpaPath}/${scheme_name}.ipacurl -F file=@${ipaPath} -F '_api_key=XXX' https://www.pgyer.com/apiv2/app/upload 自动化打包脚本 选择打包平台app-store 或者ad-hoc 选择App Store时打包完成上传到App Store 选择adhoc时上传到对应的平台 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127#使用方法if [ ! -d ./IPADir ];thenmkdir -p IPADir;fi#工程绝对路径project_path=$(cd `dirname $0`; pwd)#工程名 将XXX替换成自己的工程名project_name=XXX#scheme名 将XXX替换成自己的sheme名scheme_name=XXX#打包模式 Debug/Releasedevelopment_mode=Debug#build文件夹路径build_path=${project_path}/build#plist文件所在路径exportOptionsPlistPath=${project_path}/exportTest.plist#导出.ipa文件所在路径exportIpaPath=${project_path}/IPADir/${development_mode}echo \"请输入要导出的的平台 ? [ 1:app-store 2:ad-hoc] \"##read numberwhile([[ $number != 1 ]] &amp;&amp; [[ $number != 2 ]])doecho \"报错! 只能选择平台 1 或 2\"echo \"请重新输入要导出的的平台 ? [ 1:app-store 2:ad-hoc] \"read numberdoneif [ $number == 1 ];thendevelopment_mode=ReleaseexportOptionsPlistPath=${project_path}/exportAppstore.plistelsedevelopment_mode=ReleaseexportOptionsPlistPath=${project_path}/exportTest.plistfi#note: Using new build systemerror: Could not delete `XXX` because it was not created by the build system.rm -rf ${build_path}echo '///-----------'echo '/// 正在清理工程'echo '///-----------'xcodebuild \\clean -configuration ${development_mode} -quiet || exitecho '///--------'echo '/// 清理完成'echo '///--------'echo ''echo '///-----------'echo '/// 正在编译工程:'${development_mode}echo '///-----------'# 工程的Bundle +1buildNumber=$(/usr/libexec/PlistBuddy -c \"print CFBundleVersion\" ${project_path}/${project_name}/Info.plist)echo $buildNumberbuildNumber=$(($buildNumber + 1))/usr/libexec/PlistBuddy -c /usr/libexec/PlistBuddy -c \"print CFBundleVersion\" ${project_path}/@{project_name}/Info.plist#编译工程/Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuildxcodebuild \\archive -workspace ${project_path}/${project_name}.xcworkspace \\-scheme ${scheme_name} \\-configuration ${development_mode} \\-archivePath ${build_path}/${project_name}.xcarchive -quiet || exitecho '///--------'echo '/// 编译完成'echo '///--------'echo ''echo '///----------'echo '/// 开始ipa打包'echo '///----------'xcodebuild -exportArchive -archivePath ${build_path}/${project_name}.xcarchive \\-configuration ${development_mode} \\-exportPath ${exportIpaPath} \\-exportOptionsPlist ${exportOptionsPlistPath} \\-quiet || exitif [ -e $exportIpaPath/$scheme_name.ipa ]; thenecho '///----------'echo '/// ipa包已导出'echo '///----------'open $exportIpaPathelseecho '///-------------'echo '/// ipa包导出失败 'echo '///-------------'fiecho '///------------'echo '/// 打包ipa完成 'echo '///-----------='echo ''echo '///-------------'echo '/// 开始发布ipa包 'echo '///-------------'if [ $number == 1 ];then#验证并上传到App Store# 将-u 后面的XXX替换成自己的AppleID的账号，-p后面的XXX替换成自己的密码altoolPath=\"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool\"\"$altoolPath\" --validate-app -f ${exportIpaPath}/${scheme_name}.ipa -u XXX -p XXX -t ios --output-format xml\"$altoolPath\" --upload-app -f ${exportIpaPath}/${scheme_name}.ipa -u XXX -p XXX -t ios --output-format xmlelse#上传到Fir# 将XXX替换成自己的Fir平台的token#fir login -T XXX#fir publish $exportIpaPath/$scheme_name.ipaipaPath=${exportIpaPath}/${scheme_name}.ipacurl -F file=@${ipaPath} -F '_api_key=XXX' https://www.pgyer.com/apiv2/app/uploadfiexit 0 exportTest.plist 12345678910&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;&lt;plist version=\"1.0\"&gt;&lt;dict&gt; &lt;key&gt;method&lt;/key&gt; &lt;string&gt;ad-hoc&lt;/string&gt; &lt;key&gt;compileBitcode&lt;/key&gt; &lt;false/&gt;&lt;/dict&gt;&lt;/plist&gt; exportAppstore.plist 123456789101112&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;&lt;plist version=\"1.0\"&gt;&lt;dict&gt; &lt;key&gt;method&lt;/key&gt; &lt;string&gt;app-store&lt;/string&gt; &lt;key&gt;uploadBitcode&lt;/key&gt; &lt;true/&gt; &lt;key&gt;uploadSymbols&lt;/key&gt; &lt;true/&gt;&lt;/dict&gt;&lt;/plist&gt;","link":"/2017/05/18/iOS脚本自动打包发布及自动检测更新/"},{"title":"博客入门","text":"欢迎使用 GuoTZ 版 博客博客 所使用的 Markdown 语法为 Github Flavored Markdown，简称 GFM，这是一种最为广泛使用的 Markdown 语法之一。如果你不知道什么是 Markdown，建议看一下附带的 Markdown 语法官方说明 文档。GFM 除了支持官方的语法外，还扩展了不少语法。 GuoTZ 版 博客 的主要界面和功能1[Markdown 语法官方说明](Markdown Syntax.md) Markdown 语法官方说明 1![展示图片](http://uploads.scratch.mit.edu/projects/thumbnails/120894657.png) 回车转为换行官方的语法规定结尾加 2 个以上空格加换行才会转成换行，也就是 &lt;br /&gt; 标签。MWeb 中有个选项可以直接把换行转成 &lt;br /&gt;，不用加上 2 个以上空格，这个选项默认是开启的。如果要关闭，请在设置页面关闭。 任务列表（Task lists）Markdown 语法： 12- [ ] 任务一 未做任务 `- + 空格 + [ ]`- [x] 任务二 已做任务 `- + 空格 + [x]` 效果如下： 任务一 未做任务 - + 空格 + [ ] 任务二 已做任务 - + 空格 + [x] 图片大小及对齐官方和 GFM 都不支持图片大小控制及对齐设置。 多行或者一段代码Markdown 语法： 123456function fancyAlert(arg) { if(arg) { $.facebox({div:'#foo'}) }} 效果如下： 123456function fancyAlert(arg) { if(arg) { $.facebox({div:'#foo'}) }} 这个语法目前在 博客 中使用，必须前后空一行，才会正确解析。我觉得，在写 Markdown 文档过程中，运用空行很有必要，基本上，块级元素（标题、列表、引用、代码块、表格、段落等），都建议前后空一行。 表格Markdown 语法： 1234第一格表头 | 第二格表头--------- | -------------内容单元格 第一列第一格 | 内容单元格第二列第一格内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格 效果如下： 第一格表头 第二格表头 内容单元格 第一列第一格 内容单元格第二列第一格 内容单元格 第一列第二格 多加文字 内容单元格第二列第二格 删除线Markdown 语法： 加删除线像这样用： ~~删除这些~~ 效果如下： 加删除线像这样用： 删除这些 LaTeXMarkdown 语法： 12345678块级公式：$$ x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\\\\[ \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} =1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}}{1+\\frac{e^{-8\\pi}} {1+\\ldots} } } } \\\\]行内公式： $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ 效果如下（在设置页面中启用 LaTeX 才会看到效果，默认为启用）： 块级公式：$$ x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$ \\[ \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} =1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}}{1+\\frac{e^{-8\\pi}} {1+\\ldots} } } } \\] 行内公式： $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ 脚注（Footnote）Markdown 语法： 1这是一个脚注：[^sample_footnote] 效果如下： 这是一个脚注：^sample_footnote 注释和阅读更多 注 阅读更多的功能只用在文档库生成静态网站或发布到 Wordpress 博客时，插入时注意要后空一行。 TOCMarkdown 语法： 1[TOC] 效果如下： [TOC] markdown语法高亮 Apache Bash C# C++ CSS CoffeeScript Diff HTML, XML HTTP Ini, TOML JSON Java JavaScript Makefile Markdown Nginx Objective-C PHP Perl Properties Python Ruby SQL Shell Session Other Swift TP agger Script TypeScript VB.NET Vim new “算法-：排序算法”servergeneratedeploy","link":"/2016/12/12/博客入门/"},{"title":"算法-：排序算法","text":"比较排序 定义1 (基于比较的排序)给定一个包含n个对象的待排序序列a1a2…an. 假设我们知道如何比较其中任意两个对象的大小关系。只如何对这一序列排序 121. 传递性：如果a&lt;=b ,b&lt;=c,则一定有a&lt;=c2. 全序性：对任意a和b，或者a&lt;=b，或者b&lt;=c 定义2 (合并多个有序列)将n个序列合并为一个序列。 定义3(前k小数)给定一个包含n个对象的序列 找出前k个最小的数 1. 梳排序12345678冒泡排序for i＝0,2,…,n-1 do for j＝1,2,…,n-i do if aj＞aj+1 then 交换aj和aj+1 endif endifendif 12345678910111213public void bubbleSort(int[] a) { boolean exchange; for(int i = a.length - 1; i &gt; 0; i--) { exchange = false; for(int j = 0; j &lt; i; j++) { if(a[j] &gt; a[j+1]) { swap(a, j, j+1); exchange = true; } } if(!exchange) return; }} 123456789101112梳排序j←n,s←1.3,flag←falseWhile j＞1或者flag＝true do i←0，j←max{|j/s|，1}，flag＝false while i+j ≦ n do If ai ＞ ai＋j then 交换ai和ai＋j flag←true endif i←i＋1 end whileend while 2. 堆排序12 3. 归并排序4. 快速排序5. 内省培训6. Timsort非比较排序1. 桶排序2. 基数培训","link":"/2018/03/12/算法-：排序算法/"},{"title":"Nginx学习二","text":"日志管理 12345678910111213141516171819202122232425262728293031http{ log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server { listen 5000; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / { #自定义日志 路径、格式 access_log logs/php.log main; root /workspace/WebServer/php; index index.html index.htm index.php; } }} PathInfo12345678 location ~ \\.php(.*)$ {#使用正则抓取路径 root /Users/dingyd/workspace/WebServer/php; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $1;#给后端服务器传递参数 include fastcgi_params;} Url重写(正则表达式) 支持简单的if判断 例如-e表示文件是否存在1234567 location / { #自定义日志 路径、格式 access_log logs/php.log main; root /workspace/WebServer/php; index index.html index.htm index.php; rewrite (&lt;*)$/index.php/$1; #将www.baidu.com/user/login -&gt; www.baidu.com/index,php/user/login } try_files1234567 location / { #自定义日志 路径、格式 access_log logs/php.log main; root /workspace/WebServer/php; index index.html index.htm index.php; try_files $uri /index.php/$url; #尝试www.baidu.com/user/login是否存在文件夹 如果不存在则指向www.baidu.com/index,php/user/login } 反向代理12345## 动静分离 location ~ \\.(jpg|png|jpeg|gif) { proxy_set_header X-Forwarded_For $remote_addr;#代理地址 proxy_pass https://ip:port;} 集群与负载均衡","link":"/2017/01/29/Nginx学习二/"},{"title":"玩转Linux","text":"基础命令Linux系统的命令通常都是如下所示的格式： 1命令名称 [命名参数] [命令对象] 获取登录信息 - w / who / last。 12345678910[root@guotz ~]# w23:31:16 up 12:16, 2 users, load average: 0.00, 0.01, 0.05USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATroot pts/0 182.139.66.250 23:03 4.00s 0.02s 0.00s wjackfrue pts/1 182.139.66.250 23:26 3:56 0.00s 0.00s -bash[root@guotz ~]# whoroot pts/0 2018-04-12 23:03 (182.139.66.250)jackfrued pts/1 2018-04-12 23:26 (182.139.66.250)[root@guotz ~]# who am iroot pts/0 2018-04-12 23:03 (182.139.66.250) 查看自己使用的Shell - ps。 Shell也被称为“壳”，它是用户与内核交流的翻译官，简单的说就是人与计算机交互的接口。目前很多Linux系统默认的Shell都是bash（Bourne Again SHell），因为它可以使用Tab键进行命令补全、可以保存历史命令、可以方便的配置环境变量以及执行批处理操作等。 1234[root@guotz ~]# ps PID TTY TIME CMD3531 pts/0 00:00:00 bash3553 pts/0 00:00:00 ps 查看命令的说明 - whatis。 1234[root@guotz ~]# whatis psps (1) - report a snapshot of the current processes.[root@guotz ~]# whatis pythonpython (1) - an interpreted, interactive, object-oriented programming language 查看命令的位置 - which / whereis。 12345678[root@guotz ~]# whereis psps: /usr/bin/ps /usr/share/man/man1/ps.1.gz[root@guotz ~]# whereis pythonpython: /usr/bin/python /usr/bin/python2.7 /usr/lib/python2.7 /usr/lib64/python2.7 /etc/python /usr/include/python2.7 /usr/share/man/man1/python.1.gz[root@guotz ~]# which ps/usr/bin/ps[root@guotz ~]# which python/usr/bin/python 查看帮助文档 - man / info / apropos。 1234567891011121314151617[root@guotz ~]# ps --helpUsage:ps [options]Try 'ps --help &lt;simple|list|output|threads|misc|all&gt;' or 'ps --help &lt;s|l|o|t|m|a&gt;'for additional help text.For more details see ps(1).[root@guotz ~]# man psPS(1) User Commands PS(1)NAME ps - report a snapshot of the current processes.SYNOPSIS ps [options]DESCRIPTION...[root@guotz ~]# info ps... 切换用户 - su。 12[root@guotz ~]# su hellokitty[hellokitty@guotz root]$ 以管理员身份执行命令 - sudo。 12345[jackfrued@guotz ~]$ ls /rootls: cannot open directory /root: Permission denied[jackfrued@guotz ~]$ sudo ls /root[sudo] password for jackfrued:calendar.py code error.txt hehe hello.c index.html myconf result.txt 说明：如果希望用户能够以管理员身份执行命令，用户必须被添加到sudoers名单中，该文件在 /etc目录下。 登入登出相关 - logout / exit / adduser / userdel / passwd / ssh。 123456789101112[root@guotz ~]# adduser hellokitty[root@guotz ~]# passwd hellokittyChanging password for user jackfrued.New password:Retype new password:passwd: all authentication tokens updated successfully.[root@guotz ~]# ssh hellokitty@1.2.3.4hellokitty@1.2.3.4's password:Last login: Thu Apr 12 23:05:32 2018 from 10.12.14.16[hellokitty@guotz ~]$ logoutConnection to 1.2.3.4 closed.[root@guotz ~]# 查看系统和主机名 - uname / hostname。 123456[root@guotz ~]# unameLinux[root@guotz ~]# hostnameguotz[root@guotz ~]# cat /etc/centos-releaseCentOS Linux release 7.4.1708 (Core) 重启和关机 - reboot / init 6 / shutdown / init 0。 查看历史命令 - history。 1234567[root@guotz ~]# history...452 ls453 cd Python-3.6.5/454 clear455 history[root@guotz ~]# !454 说明：查看到历史命令之后，可以用!历史命令编号来重新执行该命令；通过history -c可以清除历史命令。 实用程序文件和文件夹操作 创建/删除目录 - mkdir / rmdir。 123[root@guotz ~]# mkdir abc[root@guotz ~]# mkdir -p xyz/abc[root@guotz ~]# rmdir abc 创建/删除文件 - touch / rm。 12345[root@guotz ~]# touch readme.txt[root@guotz ~]# touch error.txt[root@guotz ~]# rm error.txtrm: remove regular empty file ‘error.txt’? y[root@guotz ~]# rm -rf xyz touch命令用于创建空白文件或修改文件时间。在Linux系统中一个文件有三种时间： 更改内容的时间 - mtime。 更改权限的时间 - ctime。 最后访问时间 - atime。 rm的几个重要参数： -i：交互式删除，每个删除项都会进行询问。 -r：删除目录并递归的删除目录中的文件和目录。 -f：强制删除，忽略不存在的文件，没有任何提示。 切换和查看当前工作目录 - cd / pwd。 说明：cd命令后面可以跟相对路径（以当前路径作为参照）或绝对路径（以/开头）来切换到指定的目录，也可以用cd ..来返回上一级目录。 查看目录内容 - ls。 -l：以长格式查看文件和目录。 -a：显示以点开头的文件和目录（隐藏文件）。 -R：遇到目录要进行递归展开（继续列出目录下面的文件和目录）。 -d：只列出目录，不列出其他内容。 -S/-t：按大小/时间排序。 查看文件内容 - cat / head / tail / more / less。 12345678910111213141516171819202122232425262728[root@guotz ~]# wget http://www.sohu.com/ -O sohu.html--2018-06-20 18:42:34-- http://www.sohu.com/Resolving www.sohu.com (www.sohu.com)... 14.18.240.6Connecting to www.sohu.com (www.sohu.com)|14.18.240.6|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 212527 (208K) [text/html]Saving to: ‘sohu.html’100%[==================================================&gt;] 212,527 --.-K/s in 0.03s2018-06-20 18:42:34 (7.48 MB/s) - ‘sohu.html’ saved [212527/212527][root@guotz ~]# cat sohu.html...[root@guotz ~]# head -10 sohu.html&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;搜狐&lt;/title&gt;&lt;meta name=\"Keywords\" content=\"搜狐,门户网站,新媒体,网络媒体,新闻,财经,体育,娱乐,时尚,汽车,房产,科技,图片,论坛,微博,博客,视频,电影,电视剧\"/&gt;&lt;meta name=\"Description\" content=\"搜狐网为用户提供24小时不间断的最新资讯，及搜索、邮件等网络服务。内容包括全球热点事件、突发新闻、时事评论、热播影视剧、体育赛事、行业动态、生活服务信息，以及论坛、博客、微博、我的搜狐等互动空间。\" /&gt;&lt;meta name=\"shenma-site-verification\" content=\"1237e4d02a3d8d73e96cbd97b699e9c3_1504254750\"&gt;&lt;meta charset=\"utf-8\"/&gt;&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge,chrome=1\"/&gt;[root@guotz ~]# tail -2 sohu.html&lt;/body&gt;&lt;/html&gt;[root@guotz ~]# less sohu.html...[root@guotz ~]# cat -n sohu.html | more... 拷贝/移动文件 - cp / mv。 12345678[root@guotz ~]# mkdir backup[root@guotz ~]# cp sohu.html backup/[root@guotz ~]# cd backup[root@guotz backup]# lssohu.html[root@guotz backup]# mv sohu.html sohu_index.html[root@guotz backup]# lssohu_index.html 查找文件和查找内容 - find / grep。 1234567891011121314151617[root@guotz ~]# find / -name \"*.html\"/root/sohu.html/root/backup/sohu_index.html[root@guotz ~]# find . -atime 7 -type f -print[root@guotz ~]# find . -type f -size +2k[root@guotz ~]# find . -type f -name \"*.swp\" -delete[root@guotz ~]# grep \"&lt;script&gt;\" sohu.html -n20:&lt;script&gt;[root@guotz ~]# grep -E \\&lt;\\/?script.*\\&gt; sohu.html -n20:&lt;script&gt;22:&lt;/script&gt;24:&lt;script src=\"//statics.itc.cn/web/v3/static/js/es5-shim-08e41cfc3e.min.js\"&gt;&lt;/script&gt;25:&lt;script src=\"//statics.itc.cn/web/v3/static/js/es5-sham-1d5fa1124b.min.js\"&gt;&lt;/script&gt;26:&lt;script src=\"//statics.itc.cn/web/v3/static/js/html5shiv-21fc8c2ba6.js\"&gt;&lt;/script&gt;29:&lt;script type=\"text/javascript\"&gt;52:&lt;/script&gt;... 说明：grep在搜索字符串时可以使用正则表达式，如果需要使用正则表达式可以用grep -E或者直接使用egrep。 链接 - ln。 123456789101112131415[root@guotz ~]# ls -l sohu.html-rw-r--r-- 1 root root 212131 Jun 20 19:15 sohu.html[root@guotz ~]# ln /root/sohu.html /root/backup/sohu_backup[root@guotz ~]# ls -l sohu.html-rw-r--r-- 2 root root 212131 Jun 20 19:15 sohu.html[root@guotz ~]# ln /root/sohu.html /root/backup/sohu_backup2[root@guotz ~]# ls -l sohu.html-rw-r--r-- 3 root root 212131 Jun 20 19:15 sohu.html[root@guotz ~]# ln -s /etc/centos-release sysinfo[root@guotz ~]# ls -l sysinfolrwxrwxrwx 1 root root 19 Jun 20 19:21 sysinfo -&gt; /etc/centos-release[root@guotz ~]# cat sysinfoCentOS Linux release 7.4.1708 (Core)[root@guotz ~]# cat /etc/centos-releaseCentOS Linux release 7.4.1708 (Core) 说明：链接可以分为硬链接和软链接（符号链接）。硬链接可以认为是一个指向文件数据的指针，就像Python中对象的引用计数，每添加一个硬链接，文件的对应链接数就增加1，只有当文件的链接数为0时，文件所对应的存储空间才有可能被其他文件覆盖。我们平常删除文件时其实并没有删除硬盘上的数据，我们删除的只是一个指针，或者说是数据的一条使用记录，所以类似于“文件粉碎机”之类的软件在“粉碎”文件时除了删除文件指针，还会在文件对应的存储区域填入数据来保证文件无法再恢复。软链接类似于Windows系统下的快捷方式，当软链接链接的文件被删除时，软链接也就失效了。 压缩/解压缩和归档/解归档 - gzip / gunzip / xz / tar。 1234567891011121314151617181920212223242526272829303132333435[root@guotz ~]# wget http://download.redis.io/releases/redis-4.0.10.tar.gz--2018-06-20 19:29:59-- http://download.redis.io/releases/redis-4.0.10.tar.gzResolving download.redis.io (download.redis.io)... 109.74.203.151Connecting to download.redis.io (download.redis.io)|109.74.203.151|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 1738465 (1.7M) [application/x-gzip]Saving to: ‘redis-4.0.10.tar.gz’100%[==================================================&gt;] 1,738,465 70.1KB/s in 74s2018-06-20 19:31:14 (22.9 KB/s) - ‘redis-4.0.10.tar.gz’ saved [1738465/1738465][root@guotz ~]# ls redis*redis-4.0.10.tar.gz[root@guotz ~]# gunzip redis-4.0.10.tar.gz[root@guotz ~]# ls redis*redis-4.0.10.tar[root@guotz ~]# tar -xvf redis-4.0.10.tarredis-4.0.10/redis-4.0.10/.gitignoreredis-4.0.10/00-RELEASENOTESredis-4.0.10/BUGSredis-4.0.10/CONTRIBUTINGredis-4.0.10/COPYINGredis-4.0.10/INSTALLredis-4.0.10/MANIFESTOredis-4.0.10/Makefileredis-4.0.10/README.mdredis-4.0.10/deps/redis-4.0.10/deps/Makefileredis-4.0.10/deps/README.md...[root@guotz ~]# ls redis*redis-4.0.10.tarredis-4.0.10:00-RELEASENOTES COPYING Makefile redis.conf runtest-sentinel testsBUGS deps MANIFESTO runtest sentinel.conf utilsCONTRIBUTING INSTALL README.md runtest-cluster src 其他工具 - sort / uniq / diff / tr / cut / paste / file / wc。 123456789101112131415161718192021222324252627282930313233343536373839[root@guotz ~]# cat foo.txtgrapeapplepitaya[root@guotz ~]# cat bar.txt100200300400[root@guotz ~]# paste foo.txt bar.txtgrape 100apple 200pitaya 300 400[root@guotz ~]# paste foo.txt bar.txt &gt; hello.txt[root@guotz ~]# cut -b 4-8 hello.txtpe 10le 20aya 30[root@guotz ~]# cat hello.txt | tr '\\t' ','grape,100apple,200pitaya,300,400[root@guotz ~]# wget https://www.baidu.com/img/bd_logo1.png--2018-06-20 18:46:53-- https://www.baidu.com/img/bd_logo1.pngResolving www.baidu.com (www.baidu.com)... 220.181.111.188, 220.181.112.244Connecting to www.baidu.com (www.baidu.com)|220.181.111.188|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 7877 (7.7K) [image/png]Saving to: ‘bd_logo1.png’100%[==================================================&gt;] 7,877 --.-K/s in 0s2018-06-20 18:46:53 (118 MB/s) - ‘bd_logo1.png’ saved [7877/7877][root@guotz ~]# file bd_logo1.pngbd_logo1.png: PNG image data, 540 x 258, 8-bit colormap, non-interlaced[root@guotz ~]# wc sohu.html2979 6355 212527 sohu.html[root@guotz ~]# wc -l sohu.html2979 sohu.html 管道和重定向 管道的使用 - |。 例子：查找当前目录下文件个数。 12[root@guotz ~]# find ./ | wc -l6152 例子：列出当前路径下的文件和文件夹，给每一项加一个编号。 123456[root@guotz ~]# ls | cat -n 1 dump.rdb 2 mongodb-3.6.5 3 Python-3.6.5 4 redis-3.2.11 5 redis.conf 例子：查找record.log中包含AAA，但不包含BBB的记录的总数 1[root@guotz ~]# cat record.log | grep AAA | grep -v BBB | wc -l 输出重定向和错误重定向 - > / &gt;&gt; / 2>。 1234567891011121314151617[root@guotz ~]# cat readme.txtbananaapplegrapeapplegrapewatermelonpearpitaya[root@guotz ~]# cat readme.txt | sort | uniq &gt; result.txt[root@guotz ~]# cat result.txtapplebananagrapepearpitayawatermelon 输入重定向 - \\&lt;。 1234567891011[root@guotz ~]# echo 'hello, world!' &gt; hello.txt[root@guotz ~]# wall &lt; hello.txt[root@guotz ~]#Broadcast message from root@guotz (Wed Jun 20 19:43:05 2018):hello, world![root@guotz ~]# echo 'I will show you some code.' &gt;&gt; hello.txt[root@guotz ~]# wall &lt; hello.txt[root@guotz ~]#Broadcast message from root@guotz (Wed Jun 20 19:43:55 2018):hello, world!I will show you some code. 别名 alias 1234567[root@guotz ~]# alias ll='ls -l'[root@guotz ~]# alias frm='rm -rf'[root@guotz ~]# ll...drwxr-xr-x 2 root root 4096 Jun 20 12:52 abc...[root@guotz ~]# frm abc unalias 123[root@guotz ~]# unalias frm[root@guotz ~]# frm sohu.html-bash: frm: command not found 其他程序 时间和日期 - date / cal。 123456789101112131415161718[root@guotz ~]# dateWed Jun 20 12:53:19 CST 2018[root@guotz ~]# cal June 2018Su Mo Tu We Th Fr Sa 1 23 4 5 6 7 8 910 11 12 13 14 15 1617 18 19 20 21 22 2324 25 26 27 28 29 30[root@guotz ~]# cal 5 2017 May 2017Su Mo Tu We Th Fr Sa 1 2 3 4 5 67 8 9 10 11 12 1314 15 16 17 18 19 2021 22 23 24 25 26 2728 29 30 31 录制操作脚本 - script。 给用户发送消息 - mesg / write / wall / mail。 文件系统文件和路径 命名规则：文件名的最大长度与文件系统类型有关，一般情况下，文件名不应该超过255个字符，虽然绝大多数的字符都可以用于文件名，但是最好使用英文大小写字母、数字、下划线、点这样的符号。文件名中虽然可以使用空格，但应该尽可能避免使用空格，否则在输入文件名时需要用将文件名放在双引号中或者通过\\对空格进行转义。 扩展名：在Linux系统下文件的扩展名是可选的，但是使用扩展名有助于对文件内容的理解。有些应用程序要通过扩展名来识别文件，但是更多的应用程序并不依赖文件的扩展名，就像file命令在识别文件时并不是依据扩展名来判定文件的类型。 隐藏文件：以点开头的文件在Linux系统中是隐藏文件（不可见文件）。 目录结构 /bin - 基本命令的二进制文件。 /boot - 引导加载程序的静态文件。 /dev - 设备文件。 /etc - 配置文件。 /home - 普通用户主目录的父目录。 /lib - 共享库文件。 /lib64 - 共享64位库文件。 /lost+found - 存放未链接文件。 /media - 自动识别设备的挂载目录。 /mnt - 临时挂载文件系统的挂载点。 /opt - 可选插件软件包安装位置。 /proc - 内核和进程信息。 /root - 超级管理员用户主目录。 /run - 存放系统运行时需要的东西。 /sbin - 超级用户的二进制文件。 /sys - 设备的伪文件系统。 /tmp - 临时文件夹。 /usr - 用户应用目录。 /var - 变量数据目录。 访问权限 chmod - 改变文件模式比特。 1234567891011121314[root@guotz ~]# ls -l...-rw-r--r-- 1 root root 211878 Jun 19 16:06 sohu.html...[root@guotz ~]# chmod g+w,o+w sohu.html[root@guotz ~]# ls -l...-rw-rw-rw- 1 root root 211878 Jun 19 16:06 sohu.html...[root@guotz ~]# chmod 644 sohu.html[root@guotz ~]# ls -l...-rw-r--r-- 1 root root 211878 Jun 19 16:06 sohu.html... 说明：通过上面的例子可以看出，用chmod改变文件模式比特有两种方式：一种是字符设定法，另一种是数字设定法。除了chmod之外，可以通过umask来设定哪些权限将在新文件的默认权限中被删除。 长格式查看目录或文件时显示结果及其对应权限的数值如下表所示。 chown - 改变文件所有者。 123456789[root@guotz ~]# ls -l...-rw-r--r-- 1 root root 54 Jun 20 10:06 readme.txt...[root@guotz ~]# chown hellokitty readme.txt[root@guotz ~]# ls -l...-rw-r--r-- 1 hellokitty root 54 Jun 20 10:06 readme.txt... 磁盘管理 列出文件系统的磁盘使用状况 - df。 12345678[root@guotz ~]# df -hFilesystem Size Used Avail Use% Mounted on/dev/vda1 40G 5.0G 33G 14% /devtmpfs 486M 0 486M 0% /devtmpfs 497M 0 497M 0% /dev/shmtmpfs 497M 356K 496M 1% /runtmpfs 497M 0 497M 0% /sys/fs/cgrouptmpfs 100M 0 100M 0% /run/user/0 磁盘分区表操作 - fdisk。 12345678910111213[root@guotz ~]# fdisk -lDisk /dev/vda: 42.9 GB, 42949672960 bytes, 83886080 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x000a42f4 Device Boot Start End Blocks Id System/dev/vda1 * 2048 83884031 41940992 83 LinuxDisk /dev/vdb: 21.5 GB, 21474836480 bytes, 41943040 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytes 格式化文件系统 - mkfs。 文件系统检查 - fsck。 挂载/卸载 - mount / umount。 编辑器 - vim 启动vim。可以通过vi或vim命令来启动vim，启动时可以指定文件名来打开一个文件，如果没有指定文件名，也可以在保存的时候指定文件名。 1[root@guotz ~]# vim guess.py 命令模式、编辑模式和末行模式：启动vim进入的是命令模式（也称为Normal模式），在命令模式下输入英文字母i会进入编辑模式（Insert模式），屏幕下方出现-- INSERT --提示；在编辑模式下按下Esc会回到命令模式，此时如果输入英文:会进入末行模式，在末行模式下输入q!可以在不保存当前工作的情况下强行退出vim；在命令模式下输入v会进入可视模式（Visual模式），可以用光标选择一个区域再完成对应的操作。 保存和退出vim：在命令模式下输入: 进入末行模式，输入wq可以实现保存退出；如果想放弃编辑的内容输入q!强行退出，这一点刚才已经提到过了；在命令模式下也可以直接输入ZZ实现保存退出。如果只想保存文件不退出，那么可以在末行模式下输入w；可以在w后面输入空格再指定要保存的文件名。 光标操作。 在命令模式下可以通过h、j、k、l来控制光标向左、下、上、右的方向移动，可以在字母前输入数字来表示移动的距离，例如：10h表示向左移动10个字符。 在命令模式下可以通过Ctrl+y和Ctrl+e来实现向上、向下滚动一行文本的操作，可以通过Ctrl+f和Ctrl+b来实现向前和向后翻页的操作。 在命令模式下可以通过输入英文字母G将光标移到文件的末尾，可以通过gg将光标移到文件的开始，也可以通过在G前输入数字来将光标移动到指定的行。 文本操作。 删除：在命令模式下可以用dd来删除整行；可以在dd前加数字来指定删除的行数；可以用d$来实现删除从光标处删到行尾的操作，也可以通过d0来实现从光标处删到行首的操作；如果想删除一个单词，可以使用dw；如果要删除全文，可以在输入:%d（其中:用来从命令模式进入末行模式）。 复制和粘贴：在命令模式下可以用yy来复制整行；可以在yy前加数字来指定复制的行数；可以通过p将复制的内容粘贴到光标所在的地方。 撤销和恢复：在命令模式下输入u可以撤销之前的操作；通过Ctrl+r可以恢复被撤销的操作。 对内容进行排序：在命令模式下输入%!sort。 查找和替换。 查找操作需要输入/进入末行模式并提供正则表达式来匹配与之对应的内容，例如：/doc.*\\.，输入n来向前搜索，也可以输入N来向后搜索。 替换操作需要输入:进入末行模式并指定搜索的范围、正则表达式以及替换后的内容和匹配选项，例如：:1,$s/doc.*/hello/gice，其中： g - global：全局匹配。 i - ignore case：忽略大小写匹配。 c - confirm：替换时需要确认。 e - error：忽略错误。 参数设定：在输入:进入末行模式后可以对vim进行设定。 设置Tab键的空格数：set ts=4 设置显示/不显示行号：set nu / set nonu 设置启用/关闭高亮语法：syntax on / syntax off 设置显示标尺（光标所在的行和列）： set ruler 设置启用/关闭搜索结果高亮：set hls / set nohls 说明：如果希望上面的这些设定在每次启动vim时都能生效，需要将这些设定写到用户主目录下的.vimrc文件中。 高级技巧 比较多个文件。 1[root@guotz ~]# vim -d foo.txt bar.txt 打开多个文件。 1[root@guotz ~]# vim foo.txt bar.txt hello.txt 启动vim后只有一个窗口显示的是foo.txt，可以在末行模式中输入ls查看到打开的三个文件，也可以在末行模式中输入b &lt;num&gt;来显示另一个文件，例如可以用:b 2将bar.txt显示出来，可以用:b 3将hello.txt显示出来。 拆分和切换窗口。 可以在末行模式中输入sp或vs来实现对窗口的水平或垂直拆分，这样我们就可以同时打开多个编辑窗口，通过按两次Ctrl+w就可以实现编辑窗口的切换，在一个窗口中执行退出操作只会关闭对应的窗口，其他的窗口继续保留。 映射快捷键：在vim下可以将一些常用操作映射为快捷键来提升工作效率。 例子1：在命令模式下输入F4执行从第一行开始删除10000行代码的操作。 :map &lt;F4&gt; gg10000dd。 例子2：在编辑模式下输入__main直接补全为if __name__ == '__main__':。 :inoremap __main if __name__ == '__main__': 说明：上面例子2的inoremap中的i表示映射的键在编辑模式使用， nore表示不要递归，这一点非常重要，否则如果键对应的内容中又出现键本身，就会引发递归（相当于进入了死循环）。如果希望映射的快捷键每次启动vim时都能生效，需要将映射写到用户主目录下的.vimrc文件中。 录制宏。 在命令模式下输入qa开始录制宏（其中a是寄存器的名字，也可以是其他英文字母或0-9的数字）。 执行你的操作（光标操作、编辑操作等），这些操作都会被录制下来。 如果录制的操作已经完成了，按q结束录制。 通过@a（a是刚才使用的寄存器的名字）播放宏，如果要多次执行宏可以在前面加数字，例如100@a表示将宏播放100次。 可以试一试下面的例子来体验录制宏的操作，该例子来源于Harttle Land网站，该网站上提供了很多关于vim的使用技巧，有兴趣的可以去了解一下。 软件安装和配置使用包管理工具 yum - Yellowdog Updater Modified。 yum search：搜索软件包，例如yum search nginx。 yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。 yum install：安装软件包，例如yum install nginx。 yum remove：删除软件包，例如yum remove nginx。 yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。 yum check-update：检查有哪些可以更新的软件包。 yum info：显示软件包的相关信息，例如yum info nginx。 rpm - Redhat Package Manager。 安装软件包：rpm -ivh &lt;packagename&gt;.rpm。 移除软件包：rpm -e &lt;packagename&gt;。 查询软件包：rpm -qa，例如可以用rpm -qa | grep mysql来检查是否安装了MySQL相关的软件包。 下面以Nginx为例，演示如何使用yum安装软件。 123456789101112131415161718192021222324252627282930313233[root@guotz ~]# yum -y install nginx...Installed:nginx.x86_64 1:1.12.2-2.el7Dependency Installed:nginx-all-modules.noarch 1:1.12.2-2.el7nginx-mod-http-geoip.x86_64 1:1.12.2-2.el7nginx-mod-http-image-filter.x86_64 1:1.12.2-2.el7nginx-mod-http-perl.x86_64 1:1.12.2-2.el7nginx-mod-http-xslt-filter.x86_64 1:1.12.2-2.el7nginx-mod-mail.x86_64 1:1.12.2-2.el7nginx-mod-stream.x86_64 1:1.12.2-2.el7Complete![root@guotz ~]# yum info nginxLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfileInstalled PackagesName : nginxArch : x86_64Epoch : 1Version : 1.12.2Release : 2.el7Size : 1.5 MRepo : installedFrom repo : epelSummary : A high performance web server and reverse proxy serverURL : http://nginx.org/License : BSDDescription : Nginx is a web server and a reverse proxy server for HTTP, SMTP, POP3 and : IMAP protocols, with a strong focus on high concurrency, performance and low : memory usage.[root@guotz ~]# nginx -vnginx version: nginx/1.12.2 移除Nginx。 12[root@guotz ~]# nginx -s stop[root@guotz ~]# yum -y remove nginx 下面以MySQL为例，演示如何使用rpm安装软件。要安装MySQL需要先到MySQL官方网站下载对应的RPM文件，当然要选择和你使用的Linux系统对应的版本。MySQL现在是Oracle公司旗下的产品，在MySQL被收购后，MySQL的作者重新制作了一个MySQL的分支MariaDB，可以通过yum进行安装。如果要安装MySQL需要先通过yum删除mariadb-libs这个可能会跟MySQL底层库冲突的库，然后还需要安装一个名为libaio的依赖库。 1234567891011[root@guotz mysql]# lsmysql-community-client-5.7.22-1.el7.x86_64.rpmmysql-community-common-5.7.22-1.el7.x86_64.rpmmysql-community-libs-5.7.22-1.el7.x86_64.rpmmysql-community-server-5.7.22-1.el7.x86_64.rpm[root@guotz mysql]# yum -y remove mariadb-libs[root@guotz mysql]# yum -y install libaio[root@guotz mysql]# ls | xargs rpm -ivhwarning: mysql-community-client-5.7.22-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEYPreparing... ################################# [100%]... 说明：由于MySQL和MariaDB的底层依赖库是有冲突的，所以上面我们首先用yum移除了名为mariadb-libs的依赖库并安装了名为libaio的依赖库。由于我们将安装MySQL所需的rpm文件放在一个独立的目录中，所以可以通过ls命令查看到安装文件并用xargs将ls的输出作为参数交给rpm -ivh来进行安装。关于MySQL和MariaDB之间的关系，可以阅读维基百科上关于MariaDB的介绍。 移除安装的MySQL。 1[root@guotz ~]# rpm -qa | grep mysql | xargs rpm -e 下载解压配置环境变量下面以安装MongoDB为例，演示这类软件应该如何安装。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455[root@guotz ~]# wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgz--2018-06-21 18:32:53-- https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgzResolving fastdl.mongodb.org (fastdl.mongodb.org)... 52.85.83.16, 52.85.83.228, 52.85.83.186, ...Connecting to fastdl.mongodb.org (fastdl.mongodb.org)|52.85.83.16|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 100564462 (96M) [application/x-gzip]Saving to: ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’100%[==================================================&gt;] 100,564,462 630KB/s in 2m 9s2018-06-21 18:35:04 (760 KB/s) - ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’ saved [100564462/100564462][root@guotz ~]# gunzip mongodb-linux-x86_64-rhel70-3.6.5.tgz[root@guotz ~]# tar -xvf mongodb-linux-x86_64-rhel70-3.6.5.tarmongodb-linux-x86_64-rhel70-3.6.5/READMEmongodb-linux-x86_64-rhel70-3.6.5/THIRD-PARTY-NOTICESmongodb-linux-x86_64-rhel70-3.6.5/MPL-2mongodb-linux-x86_64-rhel70-3.6.5/GNU-AGPL-3.0mongodb-linux-x86_64-rhel70-3.6.5/bin/mongodumpmongodb-linux-x86_64-rhel70-3.6.5/bin/mongorestoremongodb-linux-x86_64-rhel70-3.6.5/bin/mongoexportmongodb-linux-x86_64-rhel70-3.6.5/bin/mongoimportmongodb-linux-x86_64-rhel70-3.6.5/bin/mongostatmongodb-linux-x86_64-rhel70-3.6.5/bin/mongotopmongodb-linux-x86_64-rhel70-3.6.5/bin/bsondumpmongodb-linux-x86_64-rhel70-3.6.5/bin/mongofilesmongodb-linux-x86_64-rhel70-3.6.5/bin/mongoreplaymongodb-linux-x86_64-rhel70-3.6.5/bin/mongoperfmongodb-linux-x86_64-rhel70-3.6.5/bin/mongodmongodb-linux-x86_64-rhel70-3.6.5/bin/mongosmongodb-linux-x86_64-rhel70-3.6.5/bin/mongomongodb-linux-x86_64-rhel70-3.6.5/bin/install_compass[root@guotz ~]# vim .bash_profile...PATH=$PATH:$HOME/bin:$HOME/mongodb-linux-x86_64-rhel70-3.6.5/binexport PATH...[root@guotz ~]# source .bash_profile[root@guotz ~]# mongod --versiondb version v3.6.5git version: a20ecd3e3a174162052ff99913bc2ca9a839d618OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013allocator: tcmallocmodules: nonebuild environment:distmod: rhel70distarch: x86_64target_arch: x86_64[root@guotz ~]# mongo --versionMongoDB shell version v3.6.5git version: a20ecd3e3a174162052ff99913bc2ca9a839d618OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013allocator: tcmallocmodules: nonebuild environment:distmod: rhel70distarch: x86_64target_arch: x86_64 说明：当然也可以通过yum来安装MongoDB，具体可以参照官方网站上给出的说明。 源代码构建安装 安装Python 3.6。 1234567891011121314[root@guotz ~]# yum install gcc[root@guotz ~]# wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz[root@guotz ~]# gunzip Python-3.6.5.tgz[root@guotz ~]# tar -xvf Python-3.6.5.tar[root@guotz ~]# cd Python-3.6.5[root@guotz ~]# ./configure --prefix=/usr/local/python36 --enable-optimizations[root@guotz ~]# yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel[root@guotz ~]# make &amp;&amp; make install... 配置环境变量 ...[root@guotz ~]# ln -s /usr/local/python36/bin/python3.6 /usr/bin/python3[root@guotz ~]# python3 --versionPython 3.6.5[root@guotz ~]# python3 -m pip install -U pip[root@guotz ~]# pip3 --version 安装Redis-3.2.12。 123456789[root@guotz ~]# wget http://download.redis.io/releases/redis-3.2.12.tar.gz[root@guotz ~]# gunzip redis-3.2.12.tar.gz[root@guotz ~]# tar -xvf redis-3.2.12.tar[root@guotz ~]# cd redis-3.2.12[root@guotz ~]# make &amp;&amp; make install[root@guotz ~]# redis-server --versionRedis server v=3.2.12 sha=00000000:0 malloc=jemalloc-4.0.3 bits=64 build=5bc5cd3c03d6ceb6[root@guotz ~]# redis-cli --versionredis-cli 3.2.12 配置服务 启动服务。 1[root@guotz ~]# systemctl start firewalld 终止服务。 1[root@guotz ~]# systemctl stop firewalld 重启服务。 1[root@guotz ~]# systemctl restart firewalld 查看服务。 1[root@guotz ~]# systemctl status firewalld 设置是否开机自启。 123456[root@guotz ~]# systemctl enable firewalldCreated symlink from /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service to /usr/lib/systemd/system/firewalld.service.Created symlink from /etc/systemd/system/multi-user.target.wants/firewalld.service to /usr/lib/systemd/system/firewalld.service.[root@guotz ~]# systemctl disable firewalldRemoved symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service. 计划任务 crontab命令。 123[root@guotz ~]# crontab -e* * * * * echo \"hello, world!\" &gt;&gt; /root/hello.txt59 23 * * * rm -f /root/*.log 说明：输入crontab -e命令会打开vim来编辑Cron表达式并指定触发的任务，上面我们定制了两个计划任务，一个是每分钟向/root目录下的hello.txt中追加输出hello, world!；另一个是每天23时59分执行删除/root目录下以log为后缀名的文件。如果不知道Cron表达式如何书写，可以参照/etc/crontab文件中的提示（下面会讲到）或者用谷歌或百度搜索一下，也可以使用Cron表达式在线生成器来生成Cron表达式。 crontab相关文件。 12345678910111213141516171819202122232425[root@guotz ~]# cd /etc[root@guotz etc]# ls -l | grep cron-rw-------. 1 root root 541 Aug 3 2017 anacrontabdrwxr-xr-x. 2 root root 4096 Mar 27 11:56 cron.ddrwxr-xr-x. 2 root root 4096 Mar 27 11:51 cron.daily-rw-------. 1 root root 0 Aug 3 2017 cron.denydrwxr-xr-x. 2 root root 4096 Mar 27 11:50 cron.hourlydrwxr-xr-x. 2 root root 4096 Jun 10 2014 cron.monthly-rw-r--r-- 1 root root 493 Jun 23 15:09 crontabdrwxr-xr-x. 2 root root 4096 Jun 10 2014 cron.weekly[root@guotz etc]# vim crontab 1 SHELL=/bin/bash 2 PATH=/sbin:/bin:/usr/sbin:/usr/bin 3 MAILTO=root 4 5 # For details see man 4 crontabs 6 7 # Example of job definition: 8 # .---------------- minute (0 - 59) 9 # | .------------- hour (0 - 23)10 # | | .---------- day of month (1 - 31)11 # | | | .------- month (1 - 12) OR jan,feb,mar,apr ...12 # | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat13 # | | | | |14 # * * * * * user-name command to be executed 通过修改/etc目录下的crontab文件也能够定制计划任务。 网络访问和管理 安全远程连接 - ssh。 通过网络获取资源 - wget。 -b 后台下载模式 -O 下载到指定的目录 -r 递归下载 显示/操作网络配置（旧） - ifconfig。 12345678[root@guotz ~]# ifconfig eth0eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 172.18.61.250 netmask 255.255.240.0 broadcast 172.18.63.255 ether 00:16:3e:02:b6:46 txqueuelen 1000 (Ethernet) RX packets 1067841 bytes 1296732947 (1.2 GiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 409912 bytes 43569163 (41.5 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 显示/操作网络配置（新） - ip。 123456789[root@guotz ~]# ip address1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:16:3e:02:b6:46 brd ff:ff:ff:ff:ff:ff inet 172.18.61.250/20 brd 172.18.63.255 scope global eth0 valid_lft forever preferred_lft forever 网络可达性检查 - ping。 12345678[root@guotz ~]# ping www.baidu.com -c 3PING www.a.shifen.com (220.181.111.188) 56(84) bytes of data.64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=1 ttl=51 time=36.3 ms64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=2 ttl=51 time=36.4 ms64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=3 ttl=51 time=36.4 ms--- www.a.shifen.com ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 2002msrtt min/avg/max/mdev = 36.392/36.406/36.427/0.156 ms 查看网络服务和端口 - netstat。 1[root@guotz ~]# netstat -nap | grep nginx 安全文件拷贝 - scp。 1[root@guotz ~]# scp root@1.2.3.4:/root/guido.jpg hellokitty@4.3.2.1:/home/hellokitty/pic.jpg 安全文件传输 - sftp。 1234[root@guotz ~]# sftp root@120.77.222.217root@120.77.222.217's password:Connected to 120.77.222.217.sftp&gt; help：显示帮助信息。 ls/lls：显示远端/本地目录列表。 cd/lcd：切换远端/本地路径。 mkdir/lmkdir：创建远端/本地目录。 pwd/lpwd：显示远端/本地当前工作目录。 get：下载文件。 put：上传文件。 rm：删除远端文件。 bye/exit/quit：退出sftp。 进程管理 ps - 查询进程。 12345678[root@guotz ~]# ps -efUID PID PPID C STIME TTY TIME CMDroot 1 0 0 Jun23 ? 00:00:05 /usr/lib/systemd/systemd --switched-root --system --deserialize 21root 2 0 0 Jun23 ? 00:00:00 [kthreadd]...[root@guotz ~]# ps -ef | grep mysqldroot 4943 4581 0 22:45 pts/0 00:00:00 grep --color=auto mysqldmysql 25257 1 0 Jun25 ? 00:00:39 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid kill - 终止进程。 12[root@guotz ~]# kill 1234[root@guotz ~]# kill -9 1234 例子：用一条命令强制终止正在运行的Redis进程。 1ps -ef | grep redis | grep -v grep | awk '{print $2}' | xargs kill 将进程置于后台运行。 Ctrl+Z &amp; 12345[root@guotz ~]# mongod &amp;[root@guotz ~]# redis-server...^Z[4]+ Stopped redis-server jobs - 查询后台进程。 1234[root@guotz ~]# jobs[2] Running mongod &amp;[3]- Stopped cat[4]+ Stopped redis-server bg - 让进程在后台继续运行。 123456[root@guotz ~]# bg %4[4]+ redis-server &amp;[root@guotz ~]# jobs[2] Running mongod &amp;[3]+ Stopped cat[4]- Running redis-server &amp; fg - 将后台进程置于前台。 1234567[root@guotz ~]# fg %4redis-server^C5554:signal-handler (1530025281) Received SIGINT scheduling shutdown...5554:M 26 Jun 23:01:21.413 # User requested shutdown...5554:M 26 Jun 23:01:21.413 * Saving the final RDB snapshot before exiting.5554:M 26 Jun 23:01:21.415 * DB saved on disk5554:M 26 Jun 23:01:21.415 # Redis is now ready to exit, bye bye... 说明：置于前台的进程可以使用Ctrl+C来终止它。 top - 进程监控。 1234567[root@guotz ~]# toptop - 23:04:23 up 3 days, 14:10, 1 user, load average: 0.00, 0.01, 0.05Tasks: 65 total, 1 running, 64 sleeping, 0 stopped, 0 zombie%Cpu(s): 0.3 us, 0.3 sy, 0.0 ni, 99.3 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 stKiB Mem : 1016168 total, 191060 free, 324700 used, 500408 buff/cacheKiB Swap: 0 total, 0 free, 0 used. 530944 avail Mem... 系统性能 查看系统活动信息 - sar。 查看内存使用情况 - free。 1234[root@guotz ~]# free total used free shared buff/cache availableMem: 1016168 323924 190452 356 501792 531800Swap: 0 0 0 查看进程使用内存状况 - pmap。 1234567891011121314[root@guotz ~]# ps PID TTY TIME CMD4581 pts/0 00:00:00 bash5664 pts/0 00:00:00 ps[root@guotz ~]# pmap 45814581: -bash0000000000400000 884K r-x-- bash00000000006dc000 4K r---- bash00000000006dd000 36K rw--- bash00000000006e6000 24K rw--- [ anon ]0000000001de0000 400K rw--- [ anon ]00007f82fe805000 48K r-x-- libnss_files-2.17.so00007f82fe811000 2044K ----- libnss_files-2.17.so... 报告设备CPU和I/O统计信息 - iostat。 1234567[root@guotz ~]# iostatLinux 3.10.0-693.11.1.el7.x86_64 (guotz) 06/26/2018 _x86_64_ (1 CPU)avg-cpu: %user %nice %system %iowait %steal %idle 0.79 0.00 0.20 0.04 0.00 98.97Device: tps kB_read/s kB_wrtn/s kB_read kB_wrtnvda 0.85 6.78 21.32 2106565 6623024vdb 0.00 0.01 0.00 2088 0","link":"/2019/05/09/玩转Linux/"},{"title":"vim配置成IDE","text":"最终效果 vim插件插件管理器 Vundle1git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim 安装插件在shell里面运行 vim +PluginInstall +qall 配置.vimrc123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270\" vundleif filereadable(expand(\"~/.vimrc.bundles\")) source ~/.vimrc.bundlesendifset nu \"开启行号set showcmd \"显示cmdset laststatus=1set magicset cursorlineset mouse=a \"启用鼠标set go=set showmatchset matchtime=1set nobackupset rulerset autoindentset confirmset tabstop=4set shiftwidth=4set smarttabset nocompatibleset expandtabset backspace=indent,eol,startset wildmenuset fo=cqrtset laststatus=2set textwidth=78set colorcolumn=+1set ww=&lt;,&gt;,h,lset noeb visualbelllet mapleader = \",\"filetype onfiletype plugin onfiletype indent onsyntax onsyntax enable\" encodingset fencs=utf-8,usc-bom,shift-jis,gb18030,gbk,gb2312,cp936set termencoding=utf-8set encoding=utf-8set fileencodings=ucs-bom,utf-8,cp936set fileencoding=utf-8\" Molokaicolorscheme molokaihighlight NonText guibg=#060606highlight Folded guibg=#0A0A0A guifg=#9090D0\" some mapmap &lt;F5&gt; :call CR()&lt;CR&gt;func! CR() exec \"w\" exec \"!g++ % -o %&lt;\" exec \"! ./%&lt;\"endfuncmap &lt;F10&gt; :call RG()&lt;CR&gt;func! RG() exec \"w\" exec \"!g++ % -g -o % &lt;\" exec \"! ./%&lt;\"endfuncmap &lt;F2&gt; :call SetTitle()&lt;CR&gt;func SetTitle()let l = 0let l = l + 1 | call setline(l,'/******************************')let l = l + 1 | call setline(l,' *File name: '.expand(\"%\"))let l = l + 1 | call setline(l,' *Author: wzhzzmzzy')let l = l + 1 | call setline(l,' *Created Time: '.strftime(\"%c\"))let l = l + 1 | call setline(l,' *TODO:')let l = l + 1 | call setline(l,'******************************/')let l = l + 1 | call setline(l,'')let l = l + 1 | call setline(l,'#include &lt;cstdio&gt;')let l = l + 1 | call setline(l,'#include &lt;cstring&gt;')let l = l + 1 | call setline(l,'#include &lt;cstdlib&gt;')let l = l + 1 | call setline(l,'#include &lt;iostream&gt;')let l = l + 1 | call setline(l,'#include &lt;string&gt;')let l = l + 1 | call setline(l,'#include &lt;algorithm&gt;')let l = l + 1 | call setline(l,'#include &lt;vector&gt;')let l = l + 1 | call setline(l,'#include &lt;queue&gt;')let l = l + 1 | call setline(l,'#include &lt;set&gt;')let l = l + 1 | call setline(l,'#include &lt;map&gt;')let l = l + 1 | call setline(l,'')let l = l + 1 | call setline(l,'using namespace std;')let l = l + 1 | call setline(l,'')endfuncmap &lt;F3&gt; :call SetTitle2()&lt;CR&gt;func SetTitle2()let l = 0let l = l + 1 | call setline(l,'/******************************')let l = l + 1 | call setline(l,' *File name: '.expand(\"%\"))let l = l + 1 | call setline(l,' *Author: wzhzzmzzy')let l = l + 1 | call setline(l,' *Created Time: '.strftime(\"%c\"))let l = l + 1 | call setline(l,' *TODO:')let l = l + 1 | call setline(l,'******************************/')let l = l + 1 | call setline(l,'')let l = l + 1 | call setline(l,'#include &lt;bits/stdc++.h&gt;')let l = l + 1 | call setline(l,'using namespace std;')let l = l + 1 | call setline(l,'')endfuncset nocompatible \" 这是必需的 filetype off \" 这是必需的 \" 在此设置运行时路径 set rtp+=~/.vim/bundle/Vundle.vim\" vundle初始化 call vundle#begin()\" 或者传递一个Vundle 安装插件的路径\"call vundle#begin('~/some/path/here')\" 让 Vundle 管理 Vundle, 必须Plugin 'VundleVim/Vundle.vim'Plugin 'tpope/vim-fugitive'\" 传递路径，合理设置运行时路径。 Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}\" vim代码补全插件 Plugin 'Valloric/YouCompleteMe'Plugin 'git://github.com/scrooloose/nerdtree.git'\"添加jedi-vim代码补全插件Plugin 'davidhalter/jedi-vim'\"python语法检测Plugin 'scrooloose/syntastic'\"添加PEP8代码风格检查Plugin 'nvie/vim-flake8'\"配色方案Plugin 'jnurmine/Zenburn'Plugin 'altercation/vim-colors-solarized'\"状态栏Plugin 'vim-airline/vim-airline'\"代码折叠插件Plugin 'tmhedberg/SimpylFold'\"buffer管理Bundle 'minibufexpl.vim'\"快速注释Bundle 'comments.vim'\"窗口管理Bundle 'winmanager' \"开启代码折叠set foldmethod=indentset foldlevel=99\"设置快捷键为空格noremap &lt;space&gt; za\"显示折叠代码的文档字符串let g:SimpylFold_docstring_preview=1\"每个插件都应该在这一行之前 call vundle#end() \" 这是必需的 filetype plugin indent on \" 这是必需的 \" To ignore plugin indent changes, instead use:\"filetype plugin on\"\" Brief help\" :PluginList - lists configured plugins\" :PluginInstall - installs plugins; append `!` to update or just :PluginUpdate\" :PluginSearch foo - searches for foo; append `!` to refresh local cache\" :PluginClean - confirms removal of unused plugins; append `!` to auto-approve removal\"\" see :h vundle for more details or wiki for FAQ\" Put your non-Plugin stuff after this line\"\"\"启用NERDTreeautocmd vimenter * NERDTree\" Nerd Treelet NERDChristmasTree=0let NERDTreeWinSize=40let NERDTreeChDirMode=2let NERDTreeIgnore=['\\~$', '\\.pyc$', '\\.swp$']let NERDTreeShowBookmarks=1let NERDTreeWinPos=\"left\"autocmd vimenter * if !argc() | NERDTree | endif autocmd bufenter * if (winnr(\"$\") == 1 &amp;&amp; exists(\"b:NERDTreeType\") &amp;&amp; b:NERDTreeType == \"primary\") | q | endifnmap &lt;F6&gt; :NERDTreeToggle&lt;CR&gt;\" winmanager配置let g:NERDTree_title='NERD Tree'let g:winManagerWindowLayout='NERDTree|TagList'function! NERDTree_Start() exec 'NERDTree'endfunctionfunction! NERDTree_IsValid() return 1endfunction\" 绑定F2到winmanagernmap &lt;silent&gt; &lt;F2&gt; :WMToggle&lt;CR&gt;\" 绑定F8快捷键\" 使用winmanager时，不使用快捷键\" nnoremap &lt;silent&gt; &lt;F8&gt; :TlistToggle&lt;CR&gt;\" 启动Vim后，自动打开taglist窗口。\" 使用winmanager时，将自动打开窗口关闭let Tlist_Auto_Open = 0\" Tagbarlet g:tagbar_width=35let g:tagbar_autofocus=1nmap &lt;F7&gt; :TagbarToggle&lt;CR&gt;\" YouCompleteMe\" 寻找全局配置文件let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'\" 禁用syntastic来对python检查let g:syntastic_ignore_files=[\".*\\.py$\"] \" 使用ctags生成的tags文件let g:ycm_collect_identifiers_from_tag_files = 1\" 开启语义补全\" 修改对C语言的补全快捷键，默认是CTRL+space，修改为ALT+;未测出效果\"let g:ycm_key_invoke_completion = '&lt;M-;&gt;'\" 设置转到定义处的快捷键为ALT+G，未测出效果\"nmap &lt;M-g&gt; :YcmCompleter GoToDefinitionElseDeclaration &lt;C-R&gt;=expand(\"&lt;cword&gt;\")&lt;CR&gt;&lt;CR&gt; \"关键字补全\"let g:ycm_seed_identifiers_with_syntax = 1\" 在接受补全后不分裂出一个窗口显示接受的项set completeopt-=preview\" 让补全行为与一般的IDE一致set completeopt=longest,menu\" 不显示开启vim时检查ycm_extra_conf文件的信息let g:ycm_confirm_extra_conf=0\" 每次重新生成匹配项，禁止缓存匹配项let g:ycm_cache_omnifunc=0\" 在注释中也可以补全let g:ycm_complete_in_comments=1\" 输入第一个字符就开始补全let g:ycm_min_num_of_chars_for_completion=1\" 错误标识符let g:ycm_error_symbol='&gt;&gt;'\" 警告标识符let g:ycm_warning_symbol='&gt;*'\" 不查询ultisnips提供的代码模板补全，如果需要，设置成1即可\" let g:ycm_use_ultisnips_completer=0\"\"\"设置主题颜色，以及设置快捷键F5if has('gui_running') set background=dark colorscheme solarizedelse colorscheme zenburnendifcall togglebg#map(\"&lt;F5&gt;\")\"开启代码折叠set foldmethod=indentset foldlevel=99\"设置快捷键为空格noremap &lt;space&gt; za\"显示折叠代码的文档字符串let g:SimpylFold_docstring_preview=1","link":"/2019/05/09/vim配置成IDE/"}],"tags":[{"name":"Apache","slug":"Apache","link":"/tags/Apache/"},{"name":"服务器","slug":"服务器","link":"/tags/服务器/"},{"name":"MD5加密","slug":"MD5加密","link":"/tags/MD5加密/"},{"name":"RSA加密","slug":"RSA加密","link":"/tags/RSA加密/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Django","slug":"Django","link":"/tags/Django/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"版本控制","slug":"版本控制","link":"/tags/版本控制/"},{"name":"ftp","slug":"ftp","link":"/tags/ftp/"},{"name":"vim","slug":"vim","link":"/tags/vim/"},{"name":"zsh","slug":"zsh","link":"/tags/zsh/"},{"name":"Nginx","slug":"Nginx","link":"/tags/Nginx/"},{"name":"iOS","slug":"iOS","link":"/tags/iOS/"},{"name":"Swift","slug":"Swift","link":"/tags/Swift/"},{"name":"VSCode","slug":"VSCode","link":"/tags/VSCode/"},{"name":"svn","slug":"svn","link":"/tags/svn/"},{"name":"第三方库","slug":"第三方库","link":"/tags/第三方库/"},{"name":"Shell","slug":"Shell","link":"/tags/Shell/"},{"name":"算法","slug":"算法","link":"/tags/算法/"},{"name":"排序","slug":"排序","link":"/tags/排序/"},{"name":"shell","slug":"shell","link":"/tags/shell/"}],"categories":[{"name":"后端","slug":"后端","link":"/categories/后端/"},{"name":"Django","slug":"后端/Django","link":"/categories/后端/Django/"},{"name":"Apache服务器","slug":"后端/Apache服务器","link":"/categories/后端/Apache服务器/"},{"name":"系统","slug":"系统","link":"/categories/系统/"},{"name":"Nginx服务器","slug":"后端/Nginx服务器","link":"/categories/后端/Nginx服务器/"},{"name":"iOS","slug":"iOS","link":"/categories/iOS/"},{"name":"插件","slug":"插件","link":"/categories/插件/"},{"name":"Mac","slug":"系统/Mac","link":"/categories/系统/Mac/"},{"name":"Linux","slug":"系统/Linux","link":"/categories/系统/Linux/"},{"name":"算法","slug":"算法","link":"/categories/算法/"},{"name":"Swift","slug":"iOS/Swift","link":"/categories/iOS/Swift/"},{"name":"Objective-C","slug":"iOS/Objective-C","link":"/categories/iOS/Objective-C/"},{"name":"编译","slug":"iOS/编译","link":"/categories/iOS/编译/"},{"name":"排序算法","slug":"算法/排序算法","link":"/categories/算法/排序算法/"}]}